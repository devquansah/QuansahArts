/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactFormSubmission } from "./ContactFormSubmission";
import { ContactFormSubmissionCountArgs } from "./ContactFormSubmissionCountArgs";
import { ContactFormSubmissionFindManyArgs } from "./ContactFormSubmissionFindManyArgs";
import { ContactFormSubmissionFindUniqueArgs } from "./ContactFormSubmissionFindUniqueArgs";
import { CreateContactFormSubmissionArgs } from "./CreateContactFormSubmissionArgs";
import { UpdateContactFormSubmissionArgs } from "./UpdateContactFormSubmissionArgs";
import { DeleteContactFormSubmissionArgs } from "./DeleteContactFormSubmissionArgs";
import { ContactFormSubmissionService } from "../contactFormSubmission.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactFormSubmission)
export class ContactFormSubmissionResolverBase {
  constructor(
    protected readonly service: ContactFormSubmissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "read",
    possession: "any",
  })
  async _contactFormSubmissionsMeta(
    @graphql.Args() args: ContactFormSubmissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactFormSubmission])
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "read",
    possession: "any",
  })
  async contactFormSubmissions(
    @graphql.Args() args: ContactFormSubmissionFindManyArgs
  ): Promise<ContactFormSubmission[]> {
    return this.service.contactFormSubmissions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactFormSubmission, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "read",
    possession: "own",
  })
  async contactFormSubmission(
    @graphql.Args() args: ContactFormSubmissionFindUniqueArgs
  ): Promise<ContactFormSubmission | null> {
    const result = await this.service.contactFormSubmission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactFormSubmission)
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "create",
    possession: "any",
  })
  async createContactFormSubmission(
    @graphql.Args() args: CreateContactFormSubmissionArgs
  ): Promise<ContactFormSubmission> {
    return await this.service.createContactFormSubmission({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactFormSubmission)
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "update",
    possession: "any",
  })
  async updateContactFormSubmission(
    @graphql.Args() args: UpdateContactFormSubmissionArgs
  ): Promise<ContactFormSubmission | null> {
    try {
      return await this.service.updateContactFormSubmission({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactFormSubmission)
  @nestAccessControl.UseRoles({
    resource: "ContactFormSubmission",
    action: "delete",
    possession: "any",
  })
  async deleteContactFormSubmission(
    @graphql.Args() args: DeleteContactFormSubmissionArgs
  ): Promise<ContactFormSubmission | null> {
    try {
      return await this.service.deleteContactFormSubmission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
