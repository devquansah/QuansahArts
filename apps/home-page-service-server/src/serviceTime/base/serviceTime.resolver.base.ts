/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ServiceTime } from "./ServiceTime";
import { ServiceTimeCountArgs } from "./ServiceTimeCountArgs";
import { ServiceTimeFindManyArgs } from "./ServiceTimeFindManyArgs";
import { ServiceTimeFindUniqueArgs } from "./ServiceTimeFindUniqueArgs";
import { CreateServiceTimeArgs } from "./CreateServiceTimeArgs";
import { UpdateServiceTimeArgs } from "./UpdateServiceTimeArgs";
import { DeleteServiceTimeArgs } from "./DeleteServiceTimeArgs";
import { ServiceTimeService } from "../serviceTime.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ServiceTime)
export class ServiceTimeResolverBase {
  constructor(
    protected readonly service: ServiceTimeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "read",
    possession: "any",
  })
  async _serviceTimesMeta(
    @graphql.Args() args: ServiceTimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServiceTime])
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "read",
    possession: "any",
  })
  async serviceTimes(
    @graphql.Args() args: ServiceTimeFindManyArgs
  ): Promise<ServiceTime[]> {
    return this.service.serviceTimes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServiceTime, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "read",
    possession: "own",
  })
  async serviceTime(
    @graphql.Args() args: ServiceTimeFindUniqueArgs
  ): Promise<ServiceTime | null> {
    const result = await this.service.serviceTime(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceTime)
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "create",
    possession: "any",
  })
  async createServiceTime(
    @graphql.Args() args: CreateServiceTimeArgs
  ): Promise<ServiceTime> {
    return await this.service.createServiceTime({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServiceTime)
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "update",
    possession: "any",
  })
  async updateServiceTime(
    @graphql.Args() args: UpdateServiceTimeArgs
  ): Promise<ServiceTime | null> {
    try {
      return await this.service.updateServiceTime({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServiceTime)
  @nestAccessControl.UseRoles({
    resource: "ServiceTime",
    action: "delete",
    possession: "any",
  })
  async deleteServiceTime(
    @graphql.Args() args: DeleteServiceTimeArgs
  ): Promise<ServiceTime | null> {
    try {
      return await this.service.deleteServiceTime(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
