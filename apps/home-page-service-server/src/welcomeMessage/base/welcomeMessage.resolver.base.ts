/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WelcomeMessage } from "./WelcomeMessage";
import { WelcomeMessageCountArgs } from "./WelcomeMessageCountArgs";
import { WelcomeMessageFindManyArgs } from "./WelcomeMessageFindManyArgs";
import { WelcomeMessageFindUniqueArgs } from "./WelcomeMessageFindUniqueArgs";
import { CreateWelcomeMessageArgs } from "./CreateWelcomeMessageArgs";
import { UpdateWelcomeMessageArgs } from "./UpdateWelcomeMessageArgs";
import { DeleteWelcomeMessageArgs } from "./DeleteWelcomeMessageArgs";
import { WelcomeMessageService } from "../welcomeMessage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WelcomeMessage)
export class WelcomeMessageResolverBase {
  constructor(
    protected readonly service: WelcomeMessageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "read",
    possession: "any",
  })
  async _welcomeMessagesMeta(
    @graphql.Args() args: WelcomeMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WelcomeMessage])
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "read",
    possession: "any",
  })
  async welcomeMessages(
    @graphql.Args() args: WelcomeMessageFindManyArgs
  ): Promise<WelcomeMessage[]> {
    return this.service.welcomeMessages(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WelcomeMessage, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "read",
    possession: "own",
  })
  async welcomeMessage(
    @graphql.Args() args: WelcomeMessageFindUniqueArgs
  ): Promise<WelcomeMessage | null> {
    const result = await this.service.welcomeMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WelcomeMessage)
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "create",
    possession: "any",
  })
  async createWelcomeMessage(
    @graphql.Args() args: CreateWelcomeMessageArgs
  ): Promise<WelcomeMessage> {
    return await this.service.createWelcomeMessage({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WelcomeMessage)
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "update",
    possession: "any",
  })
  async updateWelcomeMessage(
    @graphql.Args() args: UpdateWelcomeMessageArgs
  ): Promise<WelcomeMessage | null> {
    try {
      return await this.service.updateWelcomeMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WelcomeMessage)
  @nestAccessControl.UseRoles({
    resource: "WelcomeMessage",
    action: "delete",
    possession: "any",
  })
  async deleteWelcomeMessage(
    @graphql.Args() args: DeleteWelcomeMessageArgs
  ): Promise<WelcomeMessage | null> {
    try {
      return await this.service.deleteWelcomeMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
