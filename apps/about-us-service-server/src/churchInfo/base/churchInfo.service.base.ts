/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ChurchInfo as PrismaChurchInfo } from "@prisma/client";

export class ChurchInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChurchInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.churchInfo.count(args);
  }

  async churchInfos(
    args: Prisma.ChurchInfoFindManyArgs
  ): Promise<PrismaChurchInfo[]> {
    return this.prisma.churchInfo.findMany(args);
  }
  async churchInfo(
    args: Prisma.ChurchInfoFindUniqueArgs
  ): Promise<PrismaChurchInfo | null> {
    return this.prisma.churchInfo.findUnique(args);
  }
  async createChurchInfo(
    args: Prisma.ChurchInfoCreateArgs
  ): Promise<PrismaChurchInfo> {
    return this.prisma.churchInfo.create(args);
  }
  async updateChurchInfo(
    args: Prisma.ChurchInfoUpdateArgs
  ): Promise<PrismaChurchInfo> {
    return this.prisma.churchInfo.update(args);
  }
  async deleteChurchInfo(
    args: Prisma.ChurchInfoDeleteArgs
  ): Promise<PrismaChurchInfo> {
    return this.prisma.churchInfo.delete(args);
  }
}
