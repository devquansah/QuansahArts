/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ChurchInfo } from "./ChurchInfo";
import { ChurchInfoCountArgs } from "./ChurchInfoCountArgs";
import { ChurchInfoFindManyArgs } from "./ChurchInfoFindManyArgs";
import { ChurchInfoFindUniqueArgs } from "./ChurchInfoFindUniqueArgs";
import { CreateChurchInfoArgs } from "./CreateChurchInfoArgs";
import { UpdateChurchInfoArgs } from "./UpdateChurchInfoArgs";
import { DeleteChurchInfoArgs } from "./DeleteChurchInfoArgs";
import { ChurchInfoService } from "../churchInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChurchInfo)
export class ChurchInfoResolverBase {
  constructor(
    protected readonly service: ChurchInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "read",
    possession: "any",
  })
  async _churchInfosMeta(
    @graphql.Args() args: ChurchInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChurchInfo])
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "read",
    possession: "any",
  })
  async churchInfos(
    @graphql.Args() args: ChurchInfoFindManyArgs
  ): Promise<ChurchInfo[]> {
    return this.service.churchInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChurchInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "read",
    possession: "own",
  })
  async churchInfo(
    @graphql.Args() args: ChurchInfoFindUniqueArgs
  ): Promise<ChurchInfo | null> {
    const result = await this.service.churchInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChurchInfo)
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "create",
    possession: "any",
  })
  async createChurchInfo(
    @graphql.Args() args: CreateChurchInfoArgs
  ): Promise<ChurchInfo> {
    return await this.service.createChurchInfo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChurchInfo)
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "update",
    possession: "any",
  })
  async updateChurchInfo(
    @graphql.Args() args: UpdateChurchInfoArgs
  ): Promise<ChurchInfo | null> {
    try {
      return await this.service.updateChurchInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChurchInfo)
  @nestAccessControl.UseRoles({
    resource: "ChurchInfo",
    action: "delete",
    possession: "any",
  })
  async deleteChurchInfo(
    @graphql.Args() args: DeleteChurchInfoArgs
  ): Promise<ChurchInfo | null> {
    try {
      return await this.service.deleteChurchInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
